
### EPHYS PARAMETERS ###

# min and max of frequency band in Hz
FREQ_BAND: [200, 1500]

# Minimal duration of a state to be detected
# in bins of the estimated MUA signal.
# MUA binsize ~ MIN_FREQ_BAND / sampling_rate^2
MIN_STATE_DURATION: 3

# Threshold for detecting up states;
# the threshold can either have a fixed value across channels
# (measures from center of fitted Gaussian)
# or be set in units of sigma
# (corresponding to respective Gaussian fit)
# FIXED_THRESHOLD has priority, 0 = None
FIXED_THRESHOLD: 0
SIGMA_THRESHOLD: 2

# Detrending: 0 - no detrending;
#             1 - mean detrending;
#             2 - mean and slope detrending (linear): this should be the default.
#             3 - quadratic detrending.
#             4 - cubic detrending.
DETRENDING_ORDER: 2

# Settings to be passed to the welch_psd function of elephant
PSD_OVERLAP: 0.5
PSD_FREQ_RES: 5 # Hz

# Window around state transitions to plot, in bins
SLOPE_WINDOW: 50


### OPTICAL PARAMETERS ###

# X,Y dimension of your image (in pixels)
DIM_X: 100
DIM_Y: 100
# dimension of new 'macro-pixel' after the spacial smoothing
MACRO_PIXEL_DIM: 2
### --> Evaluate to suppress the macro-pixel smoothing
#SAMPLING_TIME: time rate of the acquisition process (in seconds)
SAMPLING_TIME: 0.04
#TIME_MIN: first time frame number (string)
TIME_MIN: 1
#TIME_MAX: last time frame number (string)
TIME_MAX: 250
TIME_SAMPLES: TIME_MAX-TIME_MIN
PIXEL_SIZE: 0.05 #mm
#number of processor to use during the analysis
nprocs: 2

#----------------------------- Dataset information -----------------------------
#images should be stored as
#<IMG_PATH>/<IMG_TYPE>/t<SET_NUMBER>/<IMG_NAME><SET_NUMBER>_<TIME_FRAME>.<EXTENSION>

#IMG_TYPE (string)
IMG_TYPE: '170110_mouse2_deep/'
#IMG_NAME (string)
IMG_NAME: 'provevideo'
#EXTENSION
EXTENSION: '.tif'
#num_measures --> number of datasets to analyse
num_measures: [1] #numbers associated to<SET_NUMBER>

#----------------------------- Analysis information ----------------------------
#Contour_Limit is the input parameter of the 'find_contours' function in the measure.find_contours module of the scikit-image Python package, https://scikit-image.org.
Contour_Limit: 0.197
#ANALYSIS PATH (string): path of the directory where results have to be saved

#*** FILTER ***
#FILTER_TYPE: 'Butterworth'
#Butterworth order
order: 6
### --> Evaluate other types of filters (Bessel, FIR, ...)

# Passband
#lowcut: lowcut of the Butterworth filter. If not sure of this number type None
lowcut: [[0.5]]
#highcut: highcut of the Butterworth filter. If not sure of this number type None
highcut: [[3.0]]
#zone: tag given to the portion of the frequency spectrum selected by the filter
zone: [['Zone_1']]
### len(lowcut), len(highcut), len(zone) == len(num_measures) (see Consistency Checks)
### The filter settings can be differentiate for each dataset
### If len(lowcut[i]) is >1 for dataset i, more than 1 band-pass filter is applied (whose settings have to be specified), and thus more than 1 Zone can be identified in the spectrum.

#*** FIT ***
#POLYFIT_ORDER: 2
### polynomial fit, order 2 (parabola)

#points: how many points should be used?
ZOOM: 4 #ZOOM ???
points: 5

#*** Visualization Options ***

#The represented spectrum is computed over a time interval of length 'spectrum_time' (in samples)
spectrum_time: 1000
#fs: sampling frequency
fs: 25.00 #[Hz]

# Here we define the number of pixels closest in time to the wave born time, that are consdered as part of the wave birth itself
k_cluster: 5
t_min: 5
t_max: 245

### SamplePixel (far from bounderies and blood vessels) for illustrating results:
#PIXEL_SAMPLE_x: x-coordinate of the SamplePixel (already reduced!)
PIXEL_SAMPLE_x: 30
#PIXEL_SAMPLE_y: y-cohordinate of the SamplePixel (already reduced!)
PIXEL_SAMPLE_y: 30
TIME_SAMPLE_min: 0
TIME_SAMPLE_max: TIME_SAMPLES
#graph color
color: 'blue'
