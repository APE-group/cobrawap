configfile: "config.yaml"
report: "report.rst"

import os
import sys
import numpy as np
sys.path.append('../')
from settings import output_path
from scripts.snakefile_utils import create_temp_configs, set_global_configs,\
                                    set_stage_inputs, read_stage_output

# the working directory is by default the directory of the Snakefile
working_dir = ''

STAGES = config["STAGES"]

def get_stage(num):
    if num < len(STAGES):
        return STAGES[num]
    else:
        # temporary solution
        return ''

## Building the temp_config.yaml files
create_temp_configs(STAGES, working_dir=working_dir)
# # overwrite stage configs with pipeline config parameters
set_global_configs(STAGES, working_dir=working_dir, config_dict=config)
# # write STAGE_OUTPUT into config of the following stage as STAGE_INPUT
set_stage_inputs(STAGES, working_dir=working_dir, output_path=output_path)

subworkflow stage01:
    workdir:
        os.path.join(working_dir, get_stage(0))
    configfile:
        os.path.join(working_dir, get_stage(0), "temp_config.yaml")

subworkflow stage02:
    workdir:
        os.path.join(working_dir, get_stage(1))
    configfile:
        os.path.join(working_dir, get_stage(1), "temp_config.yaml")

subworkflow stage03:
    workdir:
        os.path.join(working_dir, get_stage(2))
    configfile:
        os.path.join(working_dir, get_stage(2), "temp_config.yaml")

subworkflow stage04:
    workdir:
        os.path.join(working_dir, get_stage(3))
    configfile:
        os.path.join(working_dir, get_stage(3), "temp_config.yaml")

subworkflow stage05:
    workdir:
        os.path.join(working_dir, get_stage(4))
    configfile:
        os.path.join(working_dir, get_stage(4), "temp_config.yaml")

def stage_input(wildcards):
        stage_num = [i for i, stage in enumerate(STAGES)
                                    if stage == wildcards.stage][0]
        if stage_num:
            return os.path.join(output_path, f'{STAGES[stage_num-1]}.done')
        else:
            return []

def stage_output(wildcards):
    # setup for maximal 5 stages
    subworkflows=[stage01, stage02, stage03, stage04, stage05]
    if wildcards.stage not in STAGES:
        raise InputError(f"Don't recognize stage {wildcards.stage}!")
    for i, subworkflow in enumerate(subworkflows):
        if wildcards.stage == get_stage(i):
            output_name = read_stage_output(wildcards.stage,
                                            working_dir=working_dir)
            return subworkflow(os.path.join(output_path, wildcards.stage, output_name))

rule all:
    input:
        last_stage = os.path.join(output_path, f'{STAGES[-1]}.done'),
        reports = expand(os.path.join(output_path, '{subworkflow_name}',
                                      'report.html'),
                         subworkflow_name=STAGES)
    shell:
        """
        rm */temp_config.yaml
        """

rule execute_stage:
    input:
        stage_input = stage_input,
        stage_output = stage_output,
        config = os.path.join(working_dir, '{stage}', "config.yaml")
    output:
        temp(os.path.join(output_path, '{stage}.done'))
    shell:
        """
        echo {input.stage_input}
        echo {input.stage_output}
        touch "{output}"
        """

rule create_report:
    input:
        clear = os.path.join(output_path, '{subworkflow_name}', 'report.clear'),
    output:
        report = os.path.join(output_path, '{subworkflow_name}', 'report.html')
    shell:
        """
        cd {wildcards.subworkflow_name}
        snakemake --configfile temp_config.yaml \
                  --report "{output.report}" || \
        echo "Creation of report for {wildcards.subworkflow_name} failed."
        """

rule clear_report:
    output:
        temp(os.path.join('{path}', 'report.clear'))
    shell:
        """
        rm -f "{wildcards.path}/report.html"
        touch "{output}"
        """
