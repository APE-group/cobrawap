configfile: "configfile.yaml"

# https://groups.google.com/forum/#!msg/snakemake/AuSI24J4sOw/CqKCa-XsDgAJ

from settings import working_dir, data_path, output_path
from settings import img_subworkflow, fp_subworkflow
import os

workdir: working_dir

# The subworkflow create a nix file containing a list of spiketrains.
# The spiketrains are sorted regarding their x location, then their y location.
# Each spiketrain has the annotations
# "coordinates" = (x,y) and "grid_size" = (dim_x,dim_y)

subworkflow img_subworkflow:
    workdir:
        img_subworkflow
    configfile:
        os.path.join(img_subworkflow, 'configfile.yaml')

subworkflow fp_subworkflow:
    workdir:
        fp_subworkflow
    configfile:
        os.path.join(fp_subworkflow, 'configfile.yaml')


checkpoint plot_up_movie_frames:
    input:
        nix_file = os.path.join(output_path, '{dataset}', 'up_transitions.nix'),
        script = 'scripts/plot_up_movie.py'
    params:
        frame_name = 'frame',
        frame_format = SAVE_IMAGE_FORMAT
    output:
        frame_folder = directory(os.path.join(output_path,
                                '{dataset}', 'up_frames_{t_start}-{t_stop}s'))
    shell:
        """
        python {input.script} --nix_file {input.nix_file} \
                              --frame_folder {output.frame_folder} \
                              --frame_format {params.frame_format} \
                              --frame_name {params.frame_name} \
                              --t_start {wildcards.t_start} \
                              --t_stop {wildcards.t_stop}
        """

rule plot_up_movie:
    input:
        directory(os.path.join(output_path, '{dataset}',
                               'up_frames_{t_start}-{t_stop}s'))
    output:
        os.path.join(output_path, '{dataset}',
                     'up_transitions_{t_start}-{t_stop}s.mp4')
    params:
        frame_path = lambda wildcards, input: os.path.join(input[0],
                                                'frame_%05d.{}'\
                                                .format(SAVE_IMAGE_FORMAT)),
        quality = 0,
        scale_x = 1080,
        scale_y = 1080,
        fps = 8
    shell:
        """
        ffmpeg -y -i {params.frame_path} -q {params.quality} \
               -crf {params.quality} \
               -vf scale={params.scale_x}:{params.scale_y} \
               -r {params.fps} {output}
        """

# ToDo: Visualize Imaging and ECoG up-transitions side by side
# ToDo: Add to_stack() function to elephants Binned object
# ToDo: Detect wave fronts ?
# ToDo: Determine wave velocity
