import os
import sys
import numpy as np
sys.path.append(os.getcwd())
from settings import output_path, configs_dir
from scripts.snakefile_utils import create_temp_configs, set_global_configs
from scripts.snakefile_utils import set_stage_inputs, read_stage_output

# the working directory is by default the directory of the Snakefile
working_dir = ''
temp_config = 'working_config.yaml'
if configs_dir is None:
    configs_dir = working_dir

configfile: os.path.join(configs_dir, 'configs' ,'config.yaml')
report: "report.rst"

# Setting the profile
config_profile = f'config_{config["PROFILE"]}.yaml'
output_path = os.path.join(output_path, config["PROFILE"])

STAGES = config["STAGES"]

# onstart:
## building the temp_config files
create_temp_configs(STAGES,
                    configs_dir=configs_dir,
                    config_name=config_profile,
                    output_dir=output_path,
                    temp_name=temp_config)
## overwrite stage configs with pipeline config parameters
set_global_configs(STAGES,
                   output_dir=output_path,
                   config_dict=config,
                   config_file=temp_config)
## write STAGE_OUTPUT into config of the following stage as STAGE_INPUT
set_stage_inputs(STAGES,
                 output_dir=output_path,
                 config_file=temp_config)

def get_stage(num):
    if num < len(STAGES):
        return STAGES[num]
    else:
        # temporary solution
        return ''

subworkflow stage01:
    workdir:
        os.path.join(working_dir, get_stage(0))
    configfile:
        os.path.join(output_path, get_stage(0), temp_config)

subworkflow stage02:
    workdir:
        os.path.join(working_dir, get_stage(1))
    configfile:
        os.path.join(output_path, get_stage(1), temp_config)

subworkflow stage03:
    workdir:
        os.path.join(working_dir, get_stage(2))
    configfile:
        os.path.join(output_path, get_stage(2), temp_config)

subworkflow stage04:
    workdir:
        os.path.join(working_dir, get_stage(3))
    configfile:
        os.path.join(output_path, get_stage(3), temp_config)

subworkflow stage05:
    workdir:
        os.path.join(working_dir, get_stage(4))
    configfile:
        os.path.join(output_path, get_stage(4), temp_config)

def stage_input(wildcards):
        stage_num = [i for i, stage in enumerate(STAGES)
                                    if stage == wildcards.stage][0]
        if stage_num:
            return os.path.join(output_path, f'{STAGES[stage_num-1]}.done')
        else:
            return []

def stage_output(wildcards):
    # setup for maximal 5 stages
    subworkflows=[stage01, stage02, stage03, stage04, stage05]
    if wildcards.stage not in STAGES:
        raise InputError(f"Don't recognize stage {wildcards.stage}!")
    for i, subworkflow in enumerate(subworkflows):
        if wildcards.stage == get_stage(i):
            output_name = read_stage_output(wildcards.stage,
                                            config_dir=output_path,
                                            config_name=temp_config)
            output = os.path.join(output_path, wildcards.stage, output_name)
            return subworkflow(output)

rule all:
    input:
        last_stage = os.path.join(output_path, f'{STAGES[-1]}.done'),
        # reports = expand(os.path.join(output_path, '{subworkflow_name}',
        #                               'report.html'),
        #                  subworkflow_name=STAGES)
    output:
        os.path.join(output_path, 'pipeline.done')
    shell:
        """
        touch {output}
        """

rule execute_stage:
    input:
        stage_input = stage_input,
        stage_output = stage_output,
        config = os.path.join(output_path, '{stage}', temp_config)
    output:
        temp(os.path.join(output_path, '{stage}.done'))
    shell:
        """
        touch "{output}"
        """

rule create_report:
    input:
        os.path.join(output_path, '{subworkflow_name}', 'report.clear'),
        configfile = os.path.join(output_path, '{subworkflow_name}', temp_config)
    output:
        report = os.path.join(output_path, '{subworkflow_name}', 'report.html')
    shell:
        """
        cd {wildcards.subworkflow_name}
        snakemake --configfile {input.configfile} \
                  --report "{output.report}" || \
        echo "Creation of report for {wildcards.subworkflow_name} failed."
        """

rule clear_report:
    output:
        temp(os.path.join('{path}', 'report.clear'))
    params:
        report_path = os.path.join('{path}', 'report.html')
    shell:
        """
        rm -f "{params.report_path}"
        touch "{output}"
        """
