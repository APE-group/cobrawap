# Stage 05 Wave Characterization
import os

configfile: os.path.join('configs', 'config_template.yaml')
report: "report.rst"

import sys
utils_path = os.path.join('..', 'scripts')
sys.path.append(os.path.join(os.getcwd(), '..'))
sys.path.append(utils_path)

from settings import output_path
from utils import parse_plot_channels

STAGE_NAME = config["STAGE_NAME"]
STAGE_OUTPUT = config["STAGE_OUTPUT"]
PROFILE = config["PROFILE"]
# NEO_FORMAT = config["NEO_FORMAT"]
# USE_LINK_AS_STAGE_OUTPUT = config["USE_LINK_AS_STAGE_OUTPUT"]
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = os.path.join(output_path, PROFILE, STAGE_NAME)

if 'STAGE_INPUT' in config and config['STAGE_INPUT'] is not None:
    STAGE_INPUT = config["STAGE_INPUT"]
else:
    STAGE_INPUT = os.path.join(output_path, PROFILE, 'stage04_wavefront_detection',
                               'waves.nix')

PLOT_TSTART = config["PLOT_TSTART"]
PLOT_TSTOP = config["PLOT_TSTOP"]
PLOT_CHANNELS = parse_plot_channels(config["PLOT_CHANNELS"], STAGE_INPUT)
PLOT_FORMAT = config["PLOT_FORMAT"]

MEASURES = config["MEASURES"]

def input(wildcards):
    return STAGE_INPUT

def measures_output(wildcards):
    return [os.path.join(OUTPUT_DIR, measure, measure+'.csv')
            for measure in MEASURES]

rule all:
    input:
        data = measures_output,
        script = os.path.join('scripts', 'merge_dataframes.py'),
        configfile = os.path.join('configs', f'config_{PROFILE}.yaml')
    params:
        data = lambda wildcards, input:
                      ['"{}"'.format(path) for path in input.data]
    output:
        data = os.path.join(OUTPUT_DIR, STAGE_OUTPUT),
        img = report(os.path.join(OUTPUT_DIR, 'overview_measures.html'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data {params.data} \
                              --output "{output.data}" \
                              --output_img "{output.img}"
        """

# ToDo: combine rules with {metric} wildcard?

rule velocity_planar:
    input:
        data = input,
        script = os.path.join('scripts', 'velocity_planar.py')
    output:
        data = os.path.join('{dir}', 'velocity_planar', 'velocity_planar.csv'),
        img = report(os.path.join('{dir}', 'velocity_planar',
                                  'velocity_planar.'+PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}"
        """

rule velocity_gradient:
    input:
        data = input,
        script = os.path.join('scripts', 'velocity_gradient.py')
    output:
        data = os.path.join('{dir}', 'velocity_gradient',
                                         'velocity_gradient.csv'),
        img = report(os.path.join('{dir}', 'velocity_gradient',
                                  'velocity_gradient.'+PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}"
        """


rule direction:
    input:
        data = input,
        script = os.path.join('scripts', 'direction.py')
    output:
        data = os.path.join('{dir}', 'direction', 'direction.csv'),
        img = report(os.path.join('{dir}', 'direction',
                                  'direction.'+PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}"
        """

# rule gradient_direction:
    # slice signal for each wave

# rule wave_classification:

# rule inter_wave_distance:
