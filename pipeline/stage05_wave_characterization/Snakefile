# Stage 05 Wave Characterization
import os

configfile: os.path.join('configs', 'config_template.yaml')
report: "report.rst"

from pathlib import Path
import sys
utils_path = str((Path() / '..').resolve())
sys.path.append(utils_path)
from settings import output_path
from utils.parse import parse_plot_channels
from types import SimpleNamespace

if 'STAGE_INPUT' not in config:
    raise ValueError('No input to the stage defined! '
                     'Either manually specify a path when executing the stage: '
                     '`snakemake --config STAGE_INPUT=path/to/inputfile.nix` '
                     'or run the full pipeline.')

config = SimpleNamespace(**config)
config.ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
config.OUTPUT_DIR = os.path.join(output_path, config.PROFILE, config.STAGE_NAME)
SCRIPT_ARGS = ' '.join([f"--{key} {value}" for key, value
                                           in config.__dict__.items()])

#### Housekeeping ####

def measures_output(wildcards):
    return [os.path.join(config.OUTPUT_DIR, measure, measure+'.csv')
            for measure in config.MEASURES]

localrules: all, check_input

#### UTILITY BLOCKS ####

rule all:
    input:
        check = os.path.join(config.OUTPUT_DIR, 'input.check'),
        data = measures_output,
        script = os.path.join('scripts', 'merge_dataframes.py'),
        # configfile = os.path.join('configs', f'config_{PROFILE}.yaml')
    params:
        data = lambda wildcards, input:
                      ['"{}"'.format(path) for path in input.data],
        merge_key = f'{config.EVENT_NAME}_id'
    output:
        data = os.path.join(config.OUTPUT_DIR, config.STAGE_OUTPUT),
        img = report(os.path.join(config.OUTPUT_DIR, 'overview_measures.html'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data {params.data} \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
                              --merge_key {params.merge_key}
        """

rule check_input:
    priority: 10
    input:
        data = config.STAGE_INPUT,
        script = os.path.join('scripts', 'check_input.py')
    output:
        temp(os.path.join('{dir}', 'input.check'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}"
        touch "{output}"
        """

#### CHARACTERIZATION BLOCKS ####

rule compute_measure:
    input:
        data = config.STAGE_INPUT,
        script = os.path.join('scripts', '{measure}.py')
    output:
        data = os.path.join('{dir}', '{measure}', '{measure}.csv'),
        img = report(os.path.join('{dir}', '{measure}',
                                  '{measure}.'+config.PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
                              {SCRIPT_ARGS}
        """

# rule velocity_planar:
#     input:
#         data = config.STAGE_INPUT,
#         script = os.path.join('scripts', 'velocity_planar.py')
#     output:
#         data = os.path.join('{dir}', 'velocity_planar', 'velocity_planar.csv'),
#         img = report(os.path.join('{dir}', 'velocity_planar',
#                                   'velocity_planar.'+PLOT_FORMAT))
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}" \
#                               --output_img "{output.img}"
#         """
#
# rule velocity_gradient:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'velocity_gradient.py')
#     output:
#         data = os.path.join('{dir}', 'velocity_gradient',
#                                          'velocity_gradient.csv'),
#         img = report(os.path.join('{dir}', 'velocity_gradient',
#                                   'velocity_gradient.'+PLOT_FORMAT))
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}" \
#                               --output_img "{output.img}"
#         """
#
#
# rule velocity_flow:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'velocity_flow.py')
#     output:
#         data = os.path.join('{dir}', 'velocity_flow', 'velocity_flow.csv'),
#         # img = report(os.path.join('{dir}', 'velocity_flow',
#                                   # 'velocity_flow.'+PLOT_FORMAT))
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}" \
#         """
#         #                       --output_img "{output.img}"
#         # """
#
# rule direction_planar:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'direction_planar.py')
#     params:
#         direction_method = DIRECTION_METHOD
#     output:
#         data = os.path.join('{dir}', 'direction_planar', 'direction_planar.csv'),
#         img = report(os.path.join('{dir}', 'direction_planar',
#                                   'direction_planar.'+PLOT_FORMAT))
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}" \
#                               --output_img "{output.img}" \
#                               --method {params.direction_method}
#         """
#
# rule inter_wave_interval:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'inter_wave_interval.py')
#     output:
#         data = os.path.join('{dir}', 'inter_wave_interval', 'inter_wave_interval.csv')
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}"
#         """
#
# rule label_planar:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'label_planar.py')
#     params:
#         alignment_threshold = ALIGNMENT_THRESHOLD
#     output:
#         data = os.path.join('{dir}', 'label_planar', 'label_planar.csv'),
#         img = report(os.path.join('{dir}', 'label_planar', 'wave_0.png'))
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}" \
#                               --alignment_threshold {params.alignment_threshold}
#         """
#
# rule time_stamp:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'time_stamp.py')
#     params:
#         time_point = TIME_STAMP_POINT
#     output:
#         data = os.path.join('{dir}', 'time_stamp', 'time_stamp.csv'),
#         img = os.path.join('{dir}', 'time_stamp', 'time_stamp.'+PLOT_FORMAT),
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}" \
#                               --output_img "{output.img}" \
#                               --time_point {params.time_point}
#         """
#
# rule duration:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'duration.py')
#     output:
#         data = os.path.join('{dir}', 'duration', 'duration.csv'),
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}"
#         """
#
# rule number_of_triggers:
#     input:
#         data = input,
#         script = os.path.join('scripts', 'number_of_triggers.py')
#     output:
#         data = os.path.join('{dir}', 'number_of_triggers', 'number_of_triggers.csv'),
#     shell:
#         """
#         {ADD_UTILS}
#         python {input.script} --data "{input.data}" \
#                               --output "{output.data}"
#         """
