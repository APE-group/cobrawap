# Stage 04 Wavefront Detection
import os

configfile: os.path.join('configs', 'config_template.yaml')
report: "report.rst"

import sys
utils_path = os.path.join('..', 'scripts')
sys.path.append(os.path.join(os.getcwd(), '..'))
sys.path.append(utils_path)

from settings import output_path
from utils import parse_plot_channels

STAGE_NAME = config["STAGE_NAME"]
STAGE_OUTPUT = config["STAGE_OUTPUT"]
PROFILE = config["PROFILE"]
NEO_FORMAT = config["NEO_FORMAT"]
USE_LINK_AS_STAGE_OUTPUT = config["USE_LINK_AS_STAGE_OUTPUT"]
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = os.path.join(output_path, PROFILE, STAGE_NAME)

if 'STAGE_INPUT' in config and config['STAGE_INPUT'] is not None:
    STAGE_INPUT = config["STAGE_INPUT"]
else:
    STAGE_INPUT = os.path.join(output_path, PROFILE, 'stage03_trigger_detection',
                               'trigger_times.nix')

PLOT_TSTART = config["PLOT_TSTART"]
PLOT_TSTOP = config["PLOT_TSTOP"]
PLOT_CHANNELS = parse_plot_channels(config["PLOT_CHANNELS"], STAGE_INPUT)
PLOT_FORMAT = config["PLOT_FORMAT"]

TRIGGER_FILTER = config["TRIGGER_FILTER"]
WAVEFRONT_FILTER = config["WAVEFRONT_FILTER"]
METRIC = config["METRIC"]
TIME_DIM = config["TIME_DIM"]
NEIGHBOUR_DISTANCE = config["NEIGHBOUR_DISTANCE"]
MIN_SAMPLES_PER_WAVE = config["MIN_SAMPLES_PER_WAVE"]

ALPHA = config["ALPHA"]
MAX_NITER = config["MAX_NITER"]
CONVERGENCE_LIMIT = config["CONVERGENCE_LIMIT"]
GAUSSIAN_SIGMA = config["GAUSSIAN_SIGMA"]
DERIVATIVE_FILTER = config["DERIVATIVE_FILTER"]

def clustering_input(wildcards):
    if len(TRIGGER_FILTER):
        return os.path.join(OUTPUT_DIR, TRIGGER_FILTER[-1], 'trigger_times.nix')
    else:
        return STAGE_INPUT

rule all:
    input:
        check = os.path.join(OUTPUT_DIR, 'input.check'),
        data = os.path.join(OUTPUT_DIR, 'clustering', STAGE_OUTPUT),
        plot_script = os.path.join('scripts', 'plot_clustering.py'),
        configfile = os.path.join('configs', f'config_{PROFILE}.yaml')
    params:
        command = 'ln -s' if USE_LINK_AS_STAGE_OUTPUT else 'cp'
    output:
        data = os.path.join(OUTPUT_DIR, STAGE_OUTPUT),
        img = report(os.path.join(OUTPUT_DIR, f'cluster.{PLOT_FORMAT}'))
    shell:
        """
        {ADD_UTILS}
        {params.command} "{input.data}" "{output.data}"
        python {input.plot_script} --data "{output.data}" \
                                   --output "{output.img}" \
        """


rule check_input:
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'check_input.py')
    output:
        temp(os.path.join('{dir}', 'input.check'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}"
        touch "{output}"
        """

#### Blocks
# ToDo: rule remove_short_states

rule clustering:
    input:
        data = clustering_input,
        script = os.path.join('scripts', 'clustering.py'),
        plot_script = os.path.join('scripts', 'plot_clustering.py')
    params:
        metric = METRIC,
        time_dim = TIME_DIM,
        neighbour_distance = NEIGHBOUR_DISTANCE,
        min_samples = MIN_SAMPLES_PER_WAVE
    output:
        data = os.path.join('{dir}', 'clustering', STAGE_OUTPUT),
        img = report(os.path.join('{dir}', 'clustering', f'wave_clustering.{PLOT_FORMAT}'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --metric {params.metric} \
                              --time_dim {params.time_dim} \
                              --neighbour_distance {params.neighbour_distance} \
                              --min_samples {params.min_samples}
        python {input.plot_script} --data "{output.data}" \
                                   --output "{output.img}"
        """

rule optical_flow:
    input:
        data = clustering_input,
        script = os.path.join('scripts', 'horn_schunck.py')
    params:
        alpha = ALPHA,
        max_Niter = MAX_NITER,
        convergence_limit = CONVERGENCE_LIMIT,
        gaussian_sigma = GAUSSIAN_SIGMA,
        derivative_filter = DERIVATIVE_FILTER
    output:
        data = os.path.join('{dir}', 'optical_flow', STAGE_OUTPUT),
        img = os.path.join('{dir}', 'optical_flow', 'optical_flow.'+PLOT_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
                              --alpha {params.alpha} \
                              --max_Niter {params.max_Niter} \
                              --convergence_limit {params.convergence_limit} \
                              --gaussian_sigma {params.gaussian_sigma} \
                              --derivative_filter {params.derivative_filter}
        """

rule critical_points:
    input:
        data = rules.optical_flow.output.data,
        script = os.path.join('scripts', 'critical_points.py')
    params:
        p = 1
    output:
        data = os.path.join('{dir}', 'critical_points', STAGE_OUTPUT),
        img = os.path.join('{dir}', 'critical_points', 'critical_points.'+PLOT_FORMAT)
    shell:
        """
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
        """
