# Stage 04 Wavefront Detection

configfile: "config.yaml"
report: "report.rst"

output_folder_name = 'stage04_wavefront_detection'

import os
import sys
sys.path.append('../')
from settings import output_path

if 'INPUT_FILE' in config:
    stage_input = config["INPUT_FILE"]
else:
    stage_input = os.path.join(output_path, 'stage03_trigger_detection',
                               'trigger_times.nix')

output_path = os.path.join(output_path, output_folder_name)

OUTPUT = config["OUTPUT"]
PLOT_FORMAT = config["PLOT_FORMAT"]
TRIGGER_FILTER = config["TRIGGER_FILTER"]
WAVEFRONT_FILTER = config["WAVEFRONT_FILTER"]

METRIC = config["METRIC"]
TIME_DIM = config["TIME_DIM"]
NEIGHBOUR_DISTANCE = config["NEIGHBOUR_DISTANCE"]
MIN_SAMPLES_PER_WAVE = config["MIN_SAMPLES_PER_WAVE"]

def clustering_input(wildcards):
    if len(TRIGGER_FILTER):
        return os.path.join(output_path, TRIGGER_FILTER[-1], 'trigger_times.nix')
    else:
        return stage_input

rule all:
    input:
        data = os.path.join(output_path, 'clustering', OUTPUT),
        plot_script = 'scripts/plot_clustering.py
    output:
        data = os.path.join(output_path, OUTPUT),
        img = report(os.path.join(output_path, 'cluster'+PLOT_FORMAT))
    shell:
        """
        ln -s {input.data} {output.data}
        python {input.plot_script} --data {output.data} \
                                   --output {output.img} \
        """

#### Blocks
# remove_short_states
#

### Clustering Block
rule clustering:
    input:
        data = clustering_input,
        script = 'scripts/clustering.py',
        plot_script = 'scripts/plot_clustering.py'
    params:
        metric = METRIC,
        time_dim = TIME_DIM,
        neighbour_distance = NEIGHBOUR_DISTANCE,
        min_samples = MIN_SAMPLES_PER_WAVE
    output:
        data = os.path.join(output_path, 'clustering', OUTPUT),
        img = report(os.path.join(output_path, 'clustering', 'wave_clustering'+PLOT_FORMAT))
    shell:
        """
        python {input.script} --data {input.data} \
                              --output {output.data} \
                              --metric {params.metric} \
                              --time_dim {params.time_dim} \
                              --neighbour_distance {params.neighbour_distance} \
                              --min_samples {params.min_samples}
        python {input.plot_script} --data {output.data} \
                                   --output {output.img}
        """
