# Stage 02 Processing
import os

configfile: os.path.join('configs', 'config_template.yaml')
report: "report.rst"

import sys
utils_path = os.path.join('..', 'scripts')
sys.path.append(os.path.join(os.getcwd(), '..'))
sys.path.append(utils_path)

from settings import output_path
from utils import parse_plot_channels

STAGE_NAME = config["STAGE_NAME"]
STAGE_OUTPUT = config["STAGE_OUTPUT"]
PROFILE = config["PROFILE"]
NEO_FORMAT = config["NEO_FORMAT"]
USE_LINK_AS_STAGE_OUTPUT = config["USE_LINK_AS_STAGE_OUTPUT"]
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = os.path.join(output_path, PROFILE, STAGE_NAME)

if 'STAGE_INPUT' in config and config['STAGE_INPUT'] is not None:
    STAGE_INPUT = config["STAGE_INPUT"]
else:
    STAGE_INPUT = os.path.join(output_path, PROFILE, 'stage01_data_entry', 'data.nix')

PLOT_TSTART = config["PLOT_TSTART"]
PLOT_TSTOP = config["PLOT_TSTOP"]
PLOT_CHANNELS = parse_plot_channels(config["PLOT_CHANNELS"], STAGE_INPUT)
PLOT_FORMAT = config["PLOT_FORMAT"]

MACRO_PIXEL_DIM = config["MACRO_PIXEL_DIM"]

BLOCK_ORDER = config["BLOCK_ORDER"]
NORMALIZE_BY = config["NORMALIZE_BY"]
HIGHPASS_FREQ = config["HIGHPASS_FREQ"]
LOWPASS_FREQ = config["LOWPASS_FREQ"]
FILTER_ORDER = config["FILTER_ORDER"]
FILTER_FUNCTION = config["FILTER_FUNCTION"]
PSD_FREQ_RES = config["PSD_FREQ_RES"]
PSD_OVERLAP = config["PSD_OVERLAP"]
DETRENDING_ORDER = config["DETRENDING_ORDER"]
BANDWIDTH = config["BANDWIDTH"]
QUANTILE = config["QUANTILE"]
KERNEL = config["KERNEL"]
PARAMETERS = config["PARAMETERS"]
INTENSITY_THRESHOLD = config["INTENSITY_THRESHOLD"]
MUA_HIGHPASS_FREQ = config["MUA_HIGHPASS_FREQ"]
MUA_LOWPASS_FREQ = config["MUA_LOWPASS_FREQ"]
logMUA_RATE = config["logMUA_RATE"]
FFT_SLICE = config["FFT_SLICE"]

#### Housekeeping ####

wildcard_constraints:
    rule_name = '\w+'

localrules: all, check_input

def locate(str_list, string):
    if string in str_list:
        return [i for i, el in enumerate(str_list) if el == string][0]
    else:
        raise ValueError("Can't find rule '{}'! Please check the spelling \
                          and the config file.".format(string))

def input_file(wildcards):
    if hasattr(wildcards, 'rule_name'):
        idx = locate(BLOCK_ORDER, wildcards.rule_name)
        if idx:
            return os.path.join(OUTPUT_DIR, BLOCK_ORDER[idx-1],
                                BLOCK_ORDER[idx-1]+'.'+NEO_FORMAT)
    elif len(BLOCK_ORDER):
        return os.path.join(OUTPUT_DIR, BLOCK_ORDER[-1],
                            BLOCK_ORDER[-1]+'.'+NEO_FORMAT)
    return os.path.join(STAGE_INPUT)

#### UTILITY BLOCKS ####

rule all:
    input:
        check = os.path.join(OUTPUT_DIR, 'input.check'),
        data = input_file,
        img = os.path.join(OUTPUT_DIR, f'processed_traces_{PLOT_TSTART}-{PLOT_TSTOP}s'),
        # configfile = os.path.join('configs', f'config_{PROFILE}.yaml')
    params:
        command = 'ln -s' if USE_LINK_AS_STAGE_OUTPUT else 'cp'
    output:
        data = os.path.join(OUTPUT_DIR, STAGE_OUTPUT),
    shell:
        """
        {params.command} "{input.data}" "{output.data}"
        """

rule check_input:
    priority: 10
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'check_input.py')
    output:
        temp(os.path.join('{dir}', 'input.check'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}"
        touch "{output}"
        """

rule clear:
    output:
        temp(os.path.join('{path}', 'clear.done'))
    params:
        block_folder = ['"'+os.path.join('{path}', block)+'"'
                        for block in BLOCK_ORDER]
    shell:
        """
        rm -rf {params.block_folder}
        touch "{output}"
        """

checkpoint plot_processed_traces:
    input:
        stage_input = STAGE_INPUT,
        stage_output = input_file,
        script = os.path.join('scripts', 'plot_processed_trace.py')
    params:
        img_name = 'processed_trace_{t_start}-{t_stop}s_channel0.'+PLOT_FORMAT,
        channels = PLOT_CHANNELS
    output:
        img_dir = report(directory(os.path.join(OUTPUT_DIR,
                                  'processed_traces_{t_start}-{t_stop}s')),
                         patterns=["{img_name}."+PLOT_FORMAT])
    shell:
        """
        {ADD_UTILS}
        python {input.script} --original_data "{input.stage_input}" \
                              --processed_data "{input.stage_output}" \
                              --img_dir "{output.img_dir}" \
                              --img_name {params.img_name} \
                              --t_start {wildcards.t_start} \
                              --t_stop {wildcards.t_stop} \
                              --channels {params.channels}
        """

rule plot_power_spectrum:
    input:
        data = input_file,
        script = os.path.join('scripts','plot_power_spectrum.py')
    params:
        highpass_freq = HIGHPASS_FREQ,
        lowpass_freq = LOWPASS_FREQ,
        psd_freq_res = PSD_FREQ_RES,
        psd_overlap = PSD_OVERLAP
    output:
        img = report(os.path.join('{dir}', '{rule_name}', 'power_spectrum.'+PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.img}" \
                              --highpass_freq {params.highpass_freq} \
                              --lowpass_freq {params.lowpass_freq} \
                              --psd_freq_res {params.psd_freq_res} \
                              --psd_overlap {params.psd_overlap} \
        """

#### PROCESSING BLOCKS (choose any)####

rule background_subtraction:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts','background_subtraction.py')
    output:
        data = os.path.join('{dir}', 'background_subtraction',
                            '{rule_name}.'+NEO_FORMAT),
        img = report(os.path.join('{dir}', '{rule_name}',
                                  'background.'+PLOT_FORMAT)),
        array = os.path.join('{dir}', '{rule_name}',
                             'background.npy')
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
                              --output_array "{output.array}"
        """

rule spatial_downsampling:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts', 'spatial_downsampling.py')
    output:
        data = os.path.join('{dir}', '{rule_name}',
                            'spatial_downsampling.'+NEO_FORMAT),
        img = report(os.path.join('{dir}', '{rule_name}',
                                  'spatial_downsampling.'+PLOT_FORMAT))
    params:
        macro_pixel_dim = MACRO_PIXEL_DIM
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
				              --macro_pixel_dim {params.macro_pixel_dim}

        """


rule normalization:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts', 'normalization.py')
    params:
        normalize_by = NORMALIZE_BY
    output:
        data = os.path.join('{dir}', 'normalization',
                            '{rule_name}.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --normalize_by {params.normalize_by}
        """

rule detrending:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts', 'detrending.py')
    params:
        order = DETRENDING_ORDER
    output:
        data = os.path.join('{dir}', 'detrending',
                            '{rule_name}.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --order {params.order}
        """

rule frequency_filter:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        img = os.path.join('{dir}', '{rule_name}', f'power_spectrum.{PLOT_FORMAT}'),
        script = os.path.join('scripts', 'frequency_filter.py')
    params:
        highpass_freq = HIGHPASS_FREQ,
        lowpass_freq = LOWPASS_FREQ,
        order = FILTER_ORDER,
        filter_function = FILTER_FUNCTION,
    output:
        data = os.path.join('{dir}', 'frequency_filter',
                            '{rule_name}.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --highpass_freq {params.highpass_freq} \
                              --lowpass_freq {params.lowpass_freq} \
                              --order {params.order} \
                              --filter_function {params.filter_function}
        """


rule KDE_characterization:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = 'scripts/KDE_characterization.py'
    params:
        bandwidth = BANDWIDTH,
        quantile = QUANTILE
    output:
        data = os.path.join('{dir}', 'KDE_characterization',
                            '{rule_name}.'+NEO_FORMAT),
        img = report(os.path.join('{dir}', 'KDE_characterization',
                                    '{rule_name}.'+PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
                              --bandwidth {params.bandwidth} \
                              --quantile {params.quantile}

        """

rule deconvolution:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = 'scripts/deconvolution.py'
    params:
        kernel = KERNEL,
        parameters = PARAMETERS
    output:
        data = os.path.join('{dir}', 'deconvolution',
                            '{rule_name}.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --kernel {params.kernel} \
                              --parameters {params.parameters}
        """

rule roi_selection:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts','roi_selection.py')
    params:
        intensity_threshold = INTENSITY_THRESHOLD
    output:
        data = os.path.join('{dir}', 'roi_selection',
                            '{rule_name}.'+NEO_FORMAT),
        img = report(os.path.join('{dir}', 'roi_selection',
                                    '{rule_name}.'+PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
                              --intensity_threshold {params.intensity_threshold}
        """

rule logMUA_estimation:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts','logMUA_estimation.py')
    params:
        highpass_freq = MUA_HIGHPASS_FREQ,
        lowpass_freq = MUA_LOWPASS_FREQ,
        logMUA_rate = logMUA_RATE,
        fft_slice = FFT_SLICE,
        psd_overlap = PSD_OVERLAP,
        plot_tstart = PLOT_TSTART,
        plot_tstop = PLOT_TSTOP,
        plot_channels = PLOT_CHANNELS,
        img = ','.join([os.path.join('{dir}', 'logMUA_estimation',
                                     f'logMUA_trace_{PLOT_TSTART}-{PLOT_TSTOP}s'
                                    +f'_channel{channel}.{PLOT_FORMAT}')
                                     for channel in PLOT_CHANNELS]),
    output:
        data = os.path.join('{dir}', 'logMUA_estimation',
                            '{rule_name}.'+NEO_FORMAT),
        img = report(os.path.join('{dir}', '{rule_name}',
                                  f'logMUA_trace_{PLOT_TSTART}-{PLOT_TSTOP}s'
                                 +f'_channel{PLOT_CHANNELS[0]}.{PLOT_FORMAT}'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{params.img}" \
                              --highpass_freq {params.highpass_freq} \
                              --lowpass_freq {params.lowpass_freq} \
                              --logMUA_rate {params.logMUA_rate} \
                              --fft_slice {params.fft_slice} \
                              --psd_overlap {params.psd_overlap} \
                              --t_start {params.plot_tstart} \
                              --t_stop {params.plot_tstop} \
                              --channels {params.plot_channels}
        """

rule phase_transform:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts','phase_transform.py')
    output:
        data = os.path.join('{dir}', 'phase_transform',
                            '{rule_name}.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}"
        """

rule zscore:
    input:
        is_clear = os.path.join('{dir}', 'clear.done'),
        data = input_file,
        script = os.path.join('scripts','z_score.py')
    output:
        data = os.path.join('{dir}', 'zscore',
                            '{rule_name}.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}"
        """
