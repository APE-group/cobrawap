"""
# Stage XY Doing Something
<description of stage purpose>
Input:
Output:
"""

from pathlib import Path
configfile: Path('configs') / 'config_template.yaml'
include: Path() / '..' / 'utils' / 'Snakefile'

#### Housekeeping ####

def final_rule_output(wildcards):
    # you can use the wildcards and config
    # to select the output of a rule that
    # yields the final output of the stage
    return config.STAGE_INPUT

#### UTILITY BLOCKS ####

use rule template_all as all with:
    input:
        check = OUTPUT_DIR / 'input.check',
        data = final_rule_output,
        img = OUTPUT_DIR / '<some_result_plot>'
        # configfile = Path('configs') / f'config_{PROFILE}.yaml',

#### <OTHER> BLOCKS ####

use rule template as standard_rule with: # (recommended)
    input:
        data = config.STAGE_INPUT,
        script = Path('scripts', '{measure}.py')
    output:
        Path('{dir}') / '{measure}' / f'output_data.{config.NEO_FORMAT}',
        img_dir = directory(OUTPUT_DIR / '{measure}')
    params:
        params('plot_tstart', 'plot_tstop', 'plot_channels',
                a=20, config=config,
                img_name='result_channel0'+config.PLOT_FORMAT)


rule classic_rule:
    input:
        data = config.STAGE_INPUT,
        script = Path('scripts', '{measure}.py')
    params:
        a = 20
    output:
        Path('{dir}') / '{measure}' / f'output_data.{config.NEO_FORMAT}',
        img = Path('{dir}') / '{measure}' / f'{{measure}}.{config.PLOT_FORMAT}'
    shell:
        """
        {ADD_UTILS}
        python3 {input.script:q} --data {input.data:q} \
                                 --output {output:q}" \
                                 --output_img {output.img:q} \
                                 --a {params.a}
        """
