# Stage 04 Wave Identification
import os

configfile: os.path.join('configs', 'config_template.yaml')
report: "report.rst"

from pathlib import Path
import sys
utils_path = str((Path() / '..').resolve())
sys.path.append(utils_path)
from settings import output_path
from utils.parse import parse_plot_channels

STAGE_NAME = config["STAGE_NAME"]
STAGE_OUTPUT = config["STAGE_OUTPUT"]
PROFILE = config["PROFILE"]
NEO_FORMAT = config["NEO_FORMAT"]
USE_LINK_AS_STAGE_OUTPUT = config["USE_LINK_AS_STAGE_OUTPUT"]
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = os.path.join(output_path, PROFILE, STAGE_NAME)

if 'STAGE_INPUT' in config and config['STAGE_INPUT'] is not None:
    STAGE_INPUT = config["STAGE_INPUT"]
else:
    STAGE_INPUT = os.path.join(output_path, PROFILE, 'stage03_trigger_detection',
                               'trigger_times.nix')

PLOT_TSTART = config["PLOT_TSTART"]
PLOT_TSTOP = config["PLOT_TSTOP"]
PLOT_CHANNELS = parse_plot_channels(config["PLOT_CHANNELS"], STAGE_INPUT)
PLOT_FORMAT = config["PLOT_FORMAT"]

if config["DETECTION_BLOCK"] == "WaveHunt_Clustering":
    BLOCK_ORDER = ["clustering", "optical_flow", "critical_points", "critical_points_clustering", "merge_wave_definitions"]

elif config["DETECTION_BLOCK"] == "WaveHunt_Time":
    BLOCK_ORDER = ["WaveHunt_Cropped"]


METRIC = config["METRIC"]
TIME_SPACE_RATIO = config["TIME_SPACE_RATIO"]
NEIGHBOUR_DISTANCE = config["NEIGHBOUR_DISTANCE"]
MIN_SAMPLES_PER_WAVE = config["MIN_SAMPLES_PER_WAVE"]

ALPHA = config["ALPHA"]
MAX_NITER = config["MAX_NITER"]
CONVERGENCE_LIMIT = config["CONVERGENCE_LIMIT"]
GAUSSIAN_SIGMA = config["GAUSSIAN_SIGMA"]
DERIVATIVE_FILTER = config["DERIVATIVE_FILTER"]
DETECT_CRITICAL_POINTS = config["DETECT_CRITICAL_POINTS"]


MAX_ABS_TIMELAG = config["MAX_ABS_TIMELAG"]
ACCEPTABLE_REJECTION_RATE = config["ACCEPTABLE_REJECTION_RATE"]
MIN_CH_NUM = config["MIN_CH_NUM"]


#localrules: all, check_input

#### Housekeeping ####

wildcard_constraints:
    rule_name = '\w+'

def locate(str_list, string):
    print(str_list)
    print(string)
    if string in str_list:
        return [i for i, el in enumerate(str_list) if el == string][0]
    else:
        raise ValueError("Can't find rule '{}'! Please check the spelling \
                          and the config file.".format(string))

def input_file(wildcards):
    if hasattr(wildcards, 'rule_name'):
        idx = locate(BLOCK_ORDER, wildcards.rule_name)
        if idx:
            return os.path.join(OUTPUT_DIR, BLOCK_ORDER[idx-1],
                                BLOCK_ORDER[idx-1]+'.'+NEO_FORMAT)
    elif len(BLOCK_ORDER):
        return os.path.join(OUTPUT_DIR, BLOCK_ORDER[-1],
                            BLOCK_ORDER[-1]+'.'+NEO_FORMAT)
    return os.path.join(STAGE_INPUT)

rule all:
    input:
        check = os.path.join(OUTPUT_DIR, 'input.check'),
        data = input_file,
        #configfile = os.path.join('configs', f'config_{PROFILE}.yaml')
    params:
        command = 'ln -s' if USE_LINK_AS_STAGE_OUTPUT else 'cp'
    output:
        data = os.path.join(OUTPUT_DIR, STAGE_OUTPUT)
    shell:
        """
        {ADD_UTILS}
        {params.command} "{input.data}" "{output.data}"
        """

rule check_input:
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'check_input.py')
    output:
        temp(os.path.join('{dir}', 'input.check'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}"
        touch "{output}"
        """

#### Wave Definitions ####


rule WaveHunt_Cropped:
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'WaveHunt_Cropped.py'),
    params:
        Max_Abs_Timelag = MAX_ABS_TIMELAG,
        Acceptable_rejection_rate = ACCEPTABLE_REJECTION_RATE,
        min_ch_num = MIN_CH_NUM,

    output:
        data = os.path.join('{dir}', 'WaveHunt_Cropped',
                            '{rule_name}.'+NEO_FORMAT),
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --min_ch_num {params.min_ch_num} \
                              --Max_Abs_Timelag {params.Max_Abs_Timelag} \
                              --Acceptable_rejection_rate {params.Acceptable_rejection_rate} \
        """

rule critical_points:
    input:
        data = os.path.join('{dir}', 'optical_flow', 'optical_flow.'+NEO_FORMAT),
        script = os.path.join('scripts', 'critical_points.py'),
        plot_script = os.path.join('scripts', 'plot_critical_points.py')
    params:
        plot_frame = 0,
        skip_step = 3
    output:
        data = os.path.join('{dir}', 'critical_points', 'critical_points.'+NEO_FORMAT),
        img = os.path.join('{dir}', 'critical_points', 'critical_points.'+PLOT_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}"
        python {input.plot_script} --data "{output.data}" \
                                   --output "{output.img}" \
                                   --frame_id {params.plot_frame} \
                                   --skip_step {params.skip_step}
        """


rule critical_points_clustering:
    # ToDo
    input:
        data = os.path.join('{dir}', 'critical_points', STAGE_OUTPUT)
    output:
        data = os.path.join('{dir}', 'critical_points_clustering', STAGE_OUTPUT)
    shell:
        """
        {ADD_UTILS}
        cp {input.data} {output.data}
        """

rule wave_mode_clustering:
    input:
        data = rules.trigger_clustering.output.data,
        script = os.path.join('scripts', 'wave_mode_clustering.py')
    params:
    output:
        data = os.path.join('{dir}', 'wave_mode_clustering', 'wave_mode_clustering.'+NEO_FORMAT),
        img = os.path.join('{dir}', 'wave_mode_clustering', 'wave_mode_clustering.'+PLOT_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --output_img "{output.img}" \
        """

#### PLOTTING ####

checkpoint plot_waves:
    input:
        data = os.path.join('{dir}', 'merge_wave_definitions', STAGE_OUTPUT),
        script = os.path.join('scripts', 'plot_waves.py')
    params:
        time_window = 0.4,  # in s
        colormap='viridis',
        img_name = 'wave_plot_id0.'+PLOT_FORMAT
    output:
        img = report(directory(os.path.join('{dir}', 'wave_plots')),
                    patterns=["{img_name}."+PLOT_FORMAT])
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output_dir "{output.img}" \
                              --img_name {params.img_name} \
                              --time_window {params.time_window} \
                              --colormap {params.colormap}
        """

#### MOVIE PLOTTING ####
FRAME_RATE = config["FRAME_RATE"]
QUALITY = config["QUALITY"]
SCALE_X = config["SCALE_X"]
SCALE_Y = config["SCALE_Y"]
FPS = config["FPS"]
BITRATE = config["BITRATE"]
COLORMAP = config["COLORMAP"]
PLOT_EVENT = config["PLOT_EVENT"]
MARKER_COLOR = config["MARKER_COLOR"]

rule time_slice:
    input:
        data = '{file_path}.' + NEO_FORMAT,
        script = os.path.join('scripts', 'time_slice.py')
    output:
        data = '{file_path}_{t_start, [0-9]+}-{t_stop, [0-9]+}s.' + NEO_FORMAT
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --t_start {wildcards.t_start} \
                              --t_stop {wildcards.t_stop} \
        """

rule plot_movie_frames:
    input:
        data = os.path.join('{path}', '{file}.'+NEO_FORMAT),
        script = os.path.join('scripts', 'plot_movie_frames.py')
    params:
        frame_name = 'frame',
        frame_format = PLOT_FORMAT,
        colormap = COLORMAP,
        frame_rate = FRAME_RATE,
        event = PLOT_EVENT,
        markercolor = MARKER_COLOR
    output:
        frame_folder = directory(os.path.join('{path}', '{file}_frames')),
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --frame_folder "{output.frame_folder}" \
                              --frame_format {params.frame_format} \
                              --frame_name {params.frame_name} \
                              --frame_rate {params.frame_rate} \
                              --colormap {params.colormap} \
                              --event {params.event} \
                              --markercolor {params.markercolor}
        """

rule plot_movie:
    input:
        os.path.join('{path}', '{file}_frames')
    output:
        os.path.join('{path}', '{file}.mp4')
    params:
        frame_path = lambda wildcards, input: os.path.join(input[0],
                                                'frame_%05d.{}'\
                                                .format(PLOT_FORMAT)),
        quality = QUALITY,
        scale_x = SCALE_X,
        scale_y = SCALE_Y,
        bitrate = BITRATE,
        fps = FPS
    shell:
        """
        ffmpeg -y -framerate {params.fps} \
               -i "{params.frame_path}" \
               -crf {params.quality} \
               -vb {params.bitrate} \
               -vcodec libx264 \
               -vf scale={params.scale_x}:{params.scale_y} \
               "{output}"
        """

rule mp4_to_webm:
    input:
        '{path}.mp4'
    params:
        quality = QUALITY,
        scale_x = SCALE_X,
        scale_y = SCALE_Y,
        bitrate = BITRATE
    output:
        '{path}.webm'
    shell:
        """
        ffmpeg -i "{input}" \
               -vcodec libvpx \
               -acodec libvorbis \
               -crf {params.quality} \
               -vb {params.bitrate} \
               -vf scale={params.scale_x}:{params.scale_y} \
               "{output}"
        """

rule mp4_to_gif:
    input:
        '{path}.mp4'
    output:
        '{path}_{scale}px.gif'
    shell:
        """
        ffmpeg -i "{input}" -vf "scale={wildcards.scale}:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 {output}
        """
