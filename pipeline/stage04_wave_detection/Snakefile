# Stage 04 Wave Detection
import os

configfile: os.path.join('configs', 'config_template.yaml')
report: "report.rst"

from pathlib import Path
import sys
utils_path = str((Path() / '..').resolve())
sys.path.append(utils_path)
from settings import output_path
from utils.parse import parse_plot_channels

STAGE_NAME = config["STAGE_NAME"]
STAGE_OUTPUT = config["STAGE_OUTPUT"]
PROFILE = config["PROFILE"]
NEO_FORMAT = config["NEO_FORMAT"]
USE_LINK_AS_STAGE_OUTPUT = config["USE_LINK_AS_STAGE_OUTPUT"]
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = os.path.join(output_path, PROFILE, STAGE_NAME)

if 'STAGE_INPUT' in config and config['STAGE_INPUT'] is not None:
    STAGE_INPUT = config["STAGE_INPUT"]
else:
    STAGE_INPUT = os.path.join(output_path, PROFILE, 'stage03_trigger_detection',
                               'trigger_times.nix')

PLOT_TSTART = config["PLOT_TSTART"]
PLOT_TSTOP = config["PLOT_TSTOP"]
PLOT_CHANNELS = parse_plot_channels(config["PLOT_CHANNELS"], STAGE_INPUT)
PLOT_FORMAT = config["PLOT_FORMAT"]

DETECTION_BLOCK = config['DETECTION_BLOCK']
ADDITIONAL_PROPERTIES = config['ADDITIONAL_PROPERTIES']

METRIC = config["METRIC"]
TIME_SPACE_RATIO = config["TIME_SPACE_RATIO"]
NEIGHBOUR_DISTANCE = config["NEIGHBOUR_DISTANCE"]
MIN_SAMPLES_PER_WAVE = config["MIN_SAMPLES_PER_WAVE"]

USE_PHASES = config["USE_PHASES"]
ALPHA = config["ALPHA"]
MAX_NITER = config["MAX_NITER"]
CONVERGENCE_LIMIT = config["CONVERGENCE_LIMIT"]
GAUSSIAN_SIGMA = config["GAUSSIAN_SIGMA"]
DERIVATIVE_FILTER = config["DERIVATIVE_FILTER"]

MIN_TRIGGER_FRACTION = config['MIN_TRIGGER_FRACTION']
NUM_WAVE_NEIGHBOURS = config['NUM_WAVE_NEIGHBOURS']
WAVE_OUTLIER_QUANTILE = config['WAVE_OUTLIER_QUANTILE']
PCA_DIMS = config['PCA_DIMS']
NUM_KMEANS_CLUSTER = config['NUM_KMEANS_CLUSTER']
INTERPOLATION_STEP_SIZE = config['INTERPOLATION_STEP_SIZE']
INTERPOLATION_SMOOTHING = config['INTERPOLATION_SMOOTHING']

localrules: all, check_input

#### UTILITY BLOCKS ####

rule all:
    input:
        check = os.path.join(OUTPUT_DIR, 'input.check'),
        # configfile = os.path.join('configs', f'config_{PROFILE}.yaml'),
        data = os.path.join(OUTPUT_DIR, 'merge_wave_definitions', STAGE_OUTPUT),
        # img = os.path.join(OUTPUT_DIR, 'wave_plots')
    params:
        command = 'ln -s' if USE_LINK_AS_STAGE_OUTPUT else 'cp'
    output:
        data = os.path.join(OUTPUT_DIR, STAGE_OUTPUT)
    shell:
        """
        {ADD_UTILS}
        {params.command} "{input.data}" "{output.data}"
        """

rule check_input:
    priority: 10
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'check_input.py')
    output:
        temp(os.path.join('{dir}', 'input.check'))
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}"
        touch "{output}"
        """

def additional_properties(wildcards):
    return [os.path.join(wildcards.dir, prop, f'{prop}.{NEO_FORMAT}')
            for prop in ADDITIONAL_PROPERTIES]

rule merge_wave_definitions:
    input:
        waves = os.path.join('{dir}', DETECTION_BLOCK, STAGE_OUTPUT),
        additional_properties = additional_properties,
        script = os.path.join('scripts', 'merge_wave_definitions.py')
    params:
        properties = ','.join([os.path.join('{dir}', prop, f'{prop}.{NEO_FORMAT}')
                for prop in ADDITIONAL_PROPERTIES])
    output:
        data = os.path.join('{dir}', 'merge_wave_definitions', STAGE_OUTPUT)
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --waves "{input.waves}" \
                                --properties "{params.properties}" \
                                --output "{output.data}"
        """

#### DETECTION BLOCK ####

rule trigger_clustering:
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'trigger_clustering.py'),
        plot_script = os.path.join('scripts', 'plot_clustering.py')
    params:
        metric = METRIC,
        time_space_ratio = TIME_SPACE_RATIO,
        neighbour_distance = NEIGHBOUR_DISTANCE,
        min_samples = MIN_SAMPLES_PER_WAVE,
        plot_time_slice = 10
    output:
        data = os.path.join('{dir}', 'trigger_clustering', STAGE_OUTPUT),
        img = report(os.path.join('{dir}', 'trigger_clustering',
                                  f'wave_cluster.{PLOT_FORMAT}'))
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}" \
                                 --output "{output.data}" \
                                 --metric {params.metric} \
                                 --time_space_ratio {params.time_space_ratio} \
                                 --neighbour_distance {params.neighbour_distance} \
                                 --min_samples {params.min_samples}
        python3 "{input.plot_script}" --data "{output.data}" \
                                      --output "{output.img}" \
                                      --time_slice {params.plot_time_slice}
        """

#### ADDITIONAL PROPERTIES ####

rule optical_flow:
    input:
        data = STAGE_INPUT,
        script = os.path.join('scripts', 'horn_schunck.py')
    params:
        alpha = ALPHA,
        max_Niter = MAX_NITER,
        convergence_limit = CONVERGENCE_LIMIT,
        gaussian_sigma = GAUSSIAN_SIGMA,
        derivative_filter = DERIVATIVE_FILTER,
        use_phases = USE_PHASES
    output:
        data = os.path.join('{dir}', 'optical_flow', 'optical_flow.'+NEO_FORMAT),
        img = os.path.join('{dir}', 'optical_flow', 'optical_flow.'+PLOT_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}" \
                                 --output "{output.data}" \
                                 --output_img "{output.img}" \
                                 --alpha {params.alpha} \
                                 --max_Niter {params.max_Niter} \
                                 --convergence_limit {params.convergence_limit} \
                                 --gaussian_sigma {params.gaussian_sigma} \
                                 --derivative_filter {params.derivative_filter} \
                                 --use_phases {params.use_phases}
        """

rule critical_points:
    input:
        data = os.path.join('{dir}', 'optical_flow', 'optical_flow.'+NEO_FORMAT),
        script = os.path.join('scripts', 'critical_points.py'),
        plot_script = os.path.join('scripts', 'plot_critical_points.py')
    params:
        plot_frame = 0,
        skip_step = 3
    output:
        data = os.path.join('{dir}', 'critical_points', 'critical_points.'+NEO_FORMAT),
        img = os.path.join('{dir}', 'critical_points', 'critical_points.'+PLOT_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}" \
                                 --output "{output.data}"
        python3 {input.plot_script} --data "{output.data}" \
                                    --output "{output.img}" \
                                    --frame_id {params.plot_frame} \
                                    --skip_step {params.skip_step}
        """


rule critical_points_clustering:
    # ToDo
    input:
        data = os.path.join('{dir}', 'critical_points', STAGE_OUTPUT)
    output:
        data = os.path.join('{dir}', 'critical_points_clustering', STAGE_OUTPUT)
    shell:
        """
        {ADD_UTILS}
        cp "{input.data}" "{output.data}"
        """

rule wave_mode_clustering:
    input:
        data = rules.trigger_clustering.output.data,
        script = os.path.join('scripts', 'wave_mode_clustering.py')
    params:
        min_trigger_fraction = MIN_TRIGGER_FRACTION,
        num_wave_neighbours = NUM_WAVE_NEIGHBOURS,
        wave_outlier_quantile = WAVE_OUTLIER_QUANTILE,
        pca_dims = PCA_DIMS,
        num_kmeans_cluster = NUM_KMEANS_CLUSTER,
        interpolation_step_size = INTERPOLATION_STEP_SIZE,
        interpolation_smoothing = INTERPOLATION_SMOOTHING
    output:
        data = os.path.join('{dir}', 'wave_mode_clustering', 'wave_mode_clustering.'+NEO_FORMAT),
        img = os.path.join('{dir}', 'wave_mode_clustering', 'wave_mode_clustering.'+PLOT_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}" \
                                 --output "{output.data}" \
                                 --output_img "{output.img}" \
                                 --min_trigger_fraction {params.min_trigger_fraction} \
                                 --num_wave_neighbours {params.num_wave_neighbours} \
                                 --wave_outlier_quantile {params.wave_outlier_quantile} \
                                 --pca_dims {params.pca_dims} \
                                 --num_kmeans_cluster {params.num_kmeans_cluster} \
                                 --interpolation_step_size {params.interpolation_step_size} \
                                 --interpolation_smoothing {params.interpolation_smoothing}
        """

#### PLOTTING ####

checkpoint plot_waves:
    input:
        data = os.path.join('{dir}', 'merge_wave_definitions', STAGE_OUTPUT),
        script = os.path.join('scripts', 'plot_waves.py')
    params:
        time_window = 0.4,  # in s
        colormap='viridis',
        img_name = 'wave_plot_id0.'+PLOT_FORMAT
    output:
        img = report(directory(os.path.join('{dir}', 'wave_plots')),
                    patterns=["{img_name}."+PLOT_FORMAT])
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}" \
                                 --output_dir "{output.img}" \
                                 --img_name {params.img_name} \
                                 --time_window {params.time_window} \
                                 --colormap {params.colormap}
        """

#### MOVIE PLOTTING ####
FRAME_RATE = config["FRAME_RATE"]
QUALITY = config["QUALITY"]
SCALE_X = config["SCALE_X"]
SCALE_Y = config["SCALE_Y"]
FPS = config["FPS"]
BITRATE = config["BITRATE"]
COLORMAP = config["COLORMAP"]
PLOT_EVENT = config["PLOT_EVENT"]
MARKER_COLOR = config["MARKER_COLOR"]

rule time_slice:
    input:
        data = '{file_path}.' + NEO_FORMAT,
        script = os.path.join('scripts', 'time_slice.py')
    output:
        data = '{file_path}_{t_start, [0-9]+}-{t_stop, [0-9]+}s.' + NEO_FORMAT
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}" \
                                --output "{output.data}" \
                                --t_start {wildcards.t_start} \
                                --t_stop {wildcards.t_stop} \
        """

rule plot_movie_frames:
    input:
        data = os.path.join('{path}', '{file}.'+NEO_FORMAT),
        script = os.path.join('scripts', 'plot_movie_frames.py')
    params:
        frame_name = 'frame',
        frame_format = PLOT_FORMAT,
        colormap = COLORMAP,
        frame_rate = FRAME_RATE,
        event = PLOT_EVENT,
        markercolor = MARKER_COLOR
    output:
        frame_folder = directory(os.path.join('{path}', '{file}_frames')),
    shell:
        """
        {ADD_UTILS}
        python3 "{input.script}" --data "{input.data}" \
                                --frame_folder "{output.frame_folder}" \
                                --frame_format {params.frame_format} \
                                --frame_name {params.frame_name} \
                                --frame_rate {params.frame_rate} \
                                --colormap {params.colormap} \
                                --event {params.event} \
                                --markercolor {params.markercolor}
        """

rule plot_movie:
    input:
        os.path.join('{path}', '{file}_frames')
    output:
        os.path.join('{path}', '{file}.mp4')
    params:
        frame_path = lambda wildcards, input: os.path.join(input[0],
                                                'frame_%05d.{}'\
                                                .format(PLOT_FORMAT)),
        quality = QUALITY,
        scale_x = SCALE_X,
        scale_y = SCALE_Y,
        bitrate = BITRATE,
        fps = FPS
    shell:
        """
        ffmpeg -y -framerate {params.fps} \
               -i "{params.frame_path}" \
               -crf {params.quality} \
               -vb {params.bitrate} \
               -vcodec libx264 \
               -vf scale={params.scale_x}:{params.scale_y} \
               "{output}"
        """

rule mp4_to_webm:
    input:
        '{path}.mp4'
    params:
        quality = QUALITY,
        scale_x = SCALE_X,
        scale_y = SCALE_Y,
        bitrate = BITRATE
    output:
        '{path}.webm'
    shell:
        """
        ffmpeg -i "{input}" \
               -vcodec libvpx \
               -acodec libvorbis \
               -crf {params.quality} \
               -vb {params.bitrate} \
               -vf scale={params.scale_x}:{params.scale_y} \
               "{output}"
        """

rule mp4_to_gif:
    input:
        '{path}.mp4'
    output:
        '{path}_{scale}px.gif'
    shell:
        """
        ffmpeg -i "{input}" -vf "scale={wildcards.scale}:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 {output}
        """
