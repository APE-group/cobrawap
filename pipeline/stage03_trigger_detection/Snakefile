# Stage 03 Trigger Detection

configfile: "config.yaml"
report: "report.rst"

import os
import sys
utils_path = '../'
sys.path.append(utils_path)

from settings import output_path
from utils import parse_plot_channels

STAGE_NAME = config["STAGE_NAME"]
STAGE_OUTPUT = config["STAGE_OUTPUT"]
NEO_FORMAT = config["NEO_FORMAT"]
USE_LINK_AS_STAGE_OUTPUT = config["USE_LINK_AS_STAGE_OUTPUT"]
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = os.path.join(output_path, STAGE_NAME)

if 'STAGE_INPUT' in config and config['STAGE_INPUT'] is not None:
    STAGE_INPUT = config["STAGE_INPUT"]
else:
    STAGE_INPUT = os.path.join(output_path, 'stage02_processing',
                               'processed_data.nix')

PLOT_TSTART = config["PLOT_TSTART"]
PLOT_TSTOP = config["PLOT_TSTOP"]
PLOT_CHANNELS = parse_plot_channels(config["PLOT_CHANNELS"], STAGE_INPUT)
PLOT_FORMAT = config["PLOT_FORMAT"]

DETECTION_BLOCK = config["DETECTION_BLOCK"]
THRESHOLD_METHOD = config["THRESHOLD_METHOD"]
FIXED_THRESHOLD = config["FIXED_THRESHOLD"]
FIT_FUNCTION = config["FIT_FUNCTION"]
BIN_NUM = config["BIN_NUM"]
SIGMA_FACTOR = config["SIGMA_FACTOR"]
TRANSITION_PHASE = config["TRANSITION_PHASE"]
MINIMA_ORDER = config["MINIMA_ORDER"]

FRAME_RATE = config["FRAME_RATE"]
QUALITY = config["QUALITY"]
SCALE_X = config["SCALE_X"]
SCALE_Y = config["SCALE_Y"]
FPS = config["FPS"]
BITRATE = config["BITRATE"]
COLORMAP = config["COLORMAP"]


rule all:
    input:
        data = os.path.join(OUTPUT_DIR, DETECTION_BLOCK,
                            'transitions.'+NEO_FORMAT),
        plot_script = 'scripts/plot_trigger_times.py',
    params:
        tstart = PLOT_TSTART,
        tstop = PLOT_TSTOP,
        channels = PLOT_CHANNELS,
        img = ','.join([os.path.join(OUTPUT_DIR, DETECTION_BLOCK,
                        f'transitions_channel{channel}.'+PLOT_FORMAT)
                        for channel in PLOT_CHANNELS]),
        command = 'ln -s' if USE_LINK_AS_STAGE_OUTPUT else 'cp'
    output:
        data = os.path.join(OUTPUT_DIR, STAGE_OUTPUT),
        img = report(os.path.join(OUTPUT_DIR, DETECTION_BLOCK,
                     f'transitions_channel{PLOT_CHANNELS[0]}.'+PLOT_FORMAT))
    shell:
        """
        {ADD_UTILS}
        {params.command} "{input.data}" "{output.data}"
        python {input.plot_script} --data "{input.data}" \
                                   --output "{params.img}" \
                                   --t_start {params.tstart} \
                                   --t_stop {params.tstop} \
                                   --channels {params.channels} \
        """


rule threshold:
    input:
        data = STAGE_INPUT,
        thresholds = os.path.join(OUTPUT_DIR, 'threshold',
                                  f'{THRESHOLD_METHOD}_thresholds.npy'),
        script = 'scripts/threshold.py'
    output:
        data = os.path.join(OUTPUT_DIR, 'threshold', 'transitions.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --thresholds "{input.thresholds}"
        """

rule calc_tresholds_fixed:
    input:
        data = STAGE_INPUT,
        script = 'scripts/calc_thresholds_fixed.py'
    params:
        threshold = FIXED_THRESHOLD
    output:
        array = os.path.join(OUTPUT_DIR, 'threshold', 'fixed_thresholds.npy')
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.array}" \
                              --threshold {params.threshold}
        """

rule calc_tresholds_fitted:
    input:
        data = STAGE_INPUT,
        script = 'scripts/calc_thresholds_fitted.py'
    params:
        sigma_factor = SIGMA_FACTOR,
        fit_function = FIT_FUNCTION,
        bin_num = BIN_NUM,
        plot_channels = PLOT_CHANNELS,
        img = ','.join([os.path.join(OUTPUT_DIR, 'threshold',
                        f'transitions_channel{channel}.{PLOT_FORMAT}')
                        for channel in PLOT_CHANNELS])
    output:
        array = os.path.join(OUTPUT_DIR, 'threshold', 'fitted_thresholds.npy'),
        img = report(os.path.join(OUTPUT_DIR, 'threshold',
                        f'transitions_channel{PLOT_CHANNELS[0]}.{PLOT_FORMAT}'))
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.array}" \
                              --output_img "{params.img}" \
                              --sigma_factor {params.sigma_factor} \
                              --fit_function {params.fit_function} \
                              --bin_num {params.bin_num} \
                              --plot_channels {params.plot_channels}
        """

rule hilbert_phase:
    input:
        data = STAGE_INPUT,
        script = 'scripts/hilbert_phase.py'
    params:
        transition_phase = TRANSITION_PHASE
    output:
        data = os.path.join(OUTPUT_DIR, 'hilbert_phase', 'transitions.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --transition_phase {params.transition_phase}
        """

rule minima:
    input:
        data = STAGE_INPUT,
        script = 'scripts/minima.py'
    params:
        order = MINIMA_ORDER
    output:
        data = os.path.join(OUTPUT_DIR, 'minima', 'transitions.'+NEO_FORMAT)
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --order {params.order}
        """

### Movie plotting rules

rule time_slice:
    input:
        data = '{file_path}.nix',
        script = 'scripts/time_slice.py'
    output:
        data = '{file_path}_{t_start}-{t_stop}s.'+NEO_FORMAT
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --output "{output.data}" \
                              --t_start {wildcards.t_start} \
                              --t_stop {wildcards.t_stop} \
        """

rule plot_movie_frames:
    input:
        data = os.path.join('{path}', '{file}.nix'),
        script = "scripts/plot_movie_frames.py",
    params:
        frame_name = 'frame',
        frame_format = PLOT_FORMAT,
        colormap = COLORMAP,
        frame_rate = FRAME_RATE
    output:
        frame_folder = directory(os.path.join('{path}', '{file}_frames')),
    shell:
        """
        {ADD_UTILS}
        python {input.script} --data "{input.data}" \
                              --frame_folder "{output.frame_folder}" \
                              --frame_format {params.frame_format} \
                              --frame_name {params.frame_name} \
                              --frame_rate {params.frame_rate} \
                              --colormap {params.colormap}
        """

rule plot_movie:
    input:
        os.path.join('{path}', '{file}_frames')
    output:
        os.path.join('{path}', '{file}.mp4')
    params:
        frame_path = lambda wildcards, input: os.path.join(input[0],
                                                'frame_%05d.{}'\
                                                .format(PLOT_FORMAT)),
        quality = QUALITY,
        scale_x = SCALE_X,
        scale_y = SCALE_Y,
        bitrate = BITRATE,
        fps = FPS
    shell:
        """
        ffmpeg -y -framerate {params.fps} \
               -i "{params.frame_path}" \
               -crf {params.quality} \
               -vb {params.bitrate} \
               -vcodec libx264 \
               -vf scale={params.scale_x}:{params.scale_y} \
               "{output}"
        """

rule mp4_to_webm:
    input:
        '{path}.mp4'
    output:
        '{path}.webm'
    shell:
        """
        ffmpeg -i "{input}" -vcodec libvpx -acodec libvorbis "{output}"
        """

rule mp4_to_gif:
    input:
        '{path}.mp4'
    output:
        '{path}_{scale}px.gif'
    shell:
        """
        ffmpeg -i "{input}" -vf "scale={wildcards.scale}:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 {output}
        """
