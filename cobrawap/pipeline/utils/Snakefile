
from pathlib import Path
import sys
from types import SimpleNamespace
utils_path = str((Path() / '..').resolve())
sys.path.append(utils_path)
from settings import output_path
from utils.parse import parse_plot_channels
from utils.snakefile import dict_to_cla, params, additional_outputs

if 'STAGE_INPUT' not in config:
    raise AttributeError('No STAGE_INPUT defined for running the stage individually! '
                         'You can set it via the command line with '
                         '`--config STAGE_INPUT=/path/to/file`. ')

config = SimpleNamespace(**config)
ADD_UTILS = f"export PYTHONPATH='$PYTHONPATH:{utils_path}'"
OUTPUT_DIR = Path(output_path) / config.PROFILE / config.STAGE_NAME

config.PLOT_CHANNELS = parse_plot_channels(config.PLOT_CHANNELS, config.STAGE_INPUT)

rule template:
    input:
        data = 'input.data', # replace
        script = Path('scripts') / '{rule_name}.py'
    output:
        Path('{dir}') / '{rule_name}' / '{rule_name}.nix',  # replace ext with NEO_FORMAT
        img = Path('{dir}') / '{rule_name}' / '{rule_name}.png'  # replace ext with PLOT_FORMAT
    params:
        params(),
        additional_outputs
    shell:
        """
        {ADD_UTILS}
        echo "commandline arguments:" {params}
        python3 {input.script:q} --data {input.data:q} \
                                 --output {output:q} \
                                 {params} 
        """

# rule template_plot:
#     input:
#         data = 'input.data', # replace
#         script = Path('scripts') / '{rule_name}.py'
#     output:
#         img = Path('{dir}') / '{rule_name}' / '{rule_name}.png'  # replace ext with PLOT_FORMAT
#     params:
#         params(),
#         additional_outputs
#     shell:
#         """
#         {ADD_UTILS}
#         echo "commandline arguments:" {params}
#         python3 {input.script:q} --data {input.data:q} \
#                                  --output {output:q} \
#                                  {params} 
#         """

rule check_input:
    priority: 10
    input:
        data = config.STAGE_INPUT,
        script = Path('scripts') / 'check_input.py'
    output:
        Path('{dir}') / 'input.check'
    shell:
        """
        {ADD_UTILS}
        python3 {input.script:q} --data {input.data:q}
        touch {output:q}
        """


rule template_all:
    input:
        check = os.path.join(OUTPUT_DIR, 'input.check'),
        data = 'stage_output.data', # replace
        img = os.path.join(OUTPUT_DIR, 'results_figure.plot') # replace
    params:
        command = 'ln -s' if config.USE_LINK_AS_STAGE_OUTPUT else 'cp'
    output:
        data = os.path.join(OUTPUT_DIR, config.STAGE_OUTPUT)
    shell:
        """
        {params.command} "{input.data}" "{output.data}"
        """
